#This file was originally generated by PyScripter's unitest wizard

import unittest
import lobsterparser
import myfile
import lobstercvar
import lobsterdirectory

class TestCLobsterFileParser(unittest.TestCase):

    def setUp(self):

        """
        Tester Function :-

        Purpose :- performs all the initialization operations prior to each test-case.

        """
        # we are wrting one cvar into file then read it and test out parser
        strCVar1 = "XStreamDSO.ScopeIdentify.DigiModeEnabled: Type,Bool,Request,OFF,Adapt,OFF,Default,OFF,Flags,RG,Range,OFF,ON"

        objCFile = myfile.CFile(strFileNameWithCompletePath = "C:\\temp\\cvartemp.txt", strMode = 'w')

        objCFile.MWrite(strCVar1)

        self.objCLobsterFileParser = lobsterparser.CLobsterFileParser(strFileName = "C:\\temp\\cvartemp.txt")

        objCFile.MClose()

        return

    """----------------------------------------------------------------------"""

    def test__init__(self):

        """
        Tester Function :-

        Purpose : - Tests Constructor function of CVar class.

        """
        objCLobsterFileParser = lobsterparser.CLobsterFileParser(strFileName = "C:\\temp\\cvartemp.txt")

        self.assertNotEqual(objCLobsterFileParser, None)

        objCLobsterFileParser = lobsterparser.CLobsterFileParser()

        self.assertNotEqual(objCLobsterFileParser, None)

        return

    """----------------------------------------------------------------------"""

    def testMReadAndPopulateCVar(self):

        """
        Tester Function :-

        Purpose : - Tests MReadAndPopulateCVar() function of CVar class.

        #   Note :- The actual code for comparing the parsed cvar object from file
                    is written in testMGetDictCollection() file

        """
        objCLobsterFileParser = lobsterparser.CLobsterFileParser(strFileName = None)
        self.assertRaises(Exception, objCLobsterFileParser.MReadAndPopulateCVar, strRegExprDelim = ": |,")
        objCLobsterFileParser.m_strFileName = self.objCLobsterFileParser.m_strFileName
        objCLobsterFileParser.MReadAndPopulateCVar()

        return

    """----------------------------------------------------------------------"""

    def testMPopulateDirectories(self):

        """
        Tester Function :-

        Purpose : - Tests MPopulateDirectories() function of CVar class.

        #   Note :- The actual code for comparing the parsed cvardirectory object from file
                    is written in testMGetDictCollection() file

        """
        self.assertRaises(Exception, self.objCLobsterFileParser.MPopulateDirectories, ())

        return

    """----------------------------------------------------------------------"""

    def testMGetDictCollection(self):

        """
        Tester Function :-

        Purpose : - Tests MGetDictCollection() function of CVar class.

        """
        #   getting the dictionary obtained as a result of parsing
        #   operation
        dictTemp = self.objCLobsterFileParser.MGetDictCollection()

        #   getting the cvar object for "XStreamDSO.ScopeIdentify.DigiModeEnabled"
        objCVar = dictTemp.get("XStreamDSO.ScopeIdentify.DigiModeEnabled")

        #   checking that objCVar have proper values, as present in file
        self.assertEqual(objCVar.MGetCVarName(), "DigiModeEnabled")
        self.assertEqual(objCVar.MGetCVarType(), lobstercvar.CVar.mC_BOOL)
        self.assertEqual(objCVar.MGetCVarRequestedValue(), "OFF")
        self.assertEqual(objCVar.MGetCVarAdaptedValue(), "OFF")
        self.assertEqual(objCVar.MGetCVarDefaultValue(), "OFF")
        self.assertEqual(objCVar.MGetCVarFlags(), [1, 4])

        #   checking that objCVarDirectory have proper values, as present in file
        objDir = dictTemp.get("XStreamDSO.ScopeIdentify")
        self.assertEqual(objDir.MGetNodeName(), "ScopeIdentify")
        self.assertEqual(objDir.MGetParentNodeNameWithFullPath(), "XStreamDSO")
        self.assertEqual(objDir.MGetChildNodes(), [])
        self.assertEqual(objDir.MGetChildCVars(), ["DigiModeEnabled"])
        self.assertEqual(objDir.MGetSiblingCVars(), [])
        self.assertEqual(objDir.MGetSiblingDirectories(), [])

        return

    """----------------------------------------------------------------------"""

if __name__ == '__main__':
    unittest.main()
