#This file was originally generated by PyScripter's unitest wizard

import unittest
import lobsterdatacontext as datacontext
import lobsterdirectory as directory
import lobstercvar as cvar

class TestCDataContext(unittest.TestCase):

    def setUp(self):

        """
        Tester Function :-

        Purpose :- performs all the initialization operations prior to each test-case.

        """
        dictTemp = {1 : "A", 2 : "B", 3 : "C", 4 : "D"}
        self.objCDataContext = datacontext.CDataContext(dictTemp)

        return

    """----------------------------------------------------------------------"""

    def tearDown(self):
        self.objCDataContext = None

    """----------------------------------------------------------------------"""

    def test__init__(self):

        """
        Tester Function :-

        Purpose : - Tests Constructor function of CVar class.

        """
        #   TODO :- test the constructor in the next version of lobster, when prefernces
        #           and other portions of data-structures are ready.

        return

    """----------------------------------------------------------------------"""

    def testMLoad(self):

        """
        Tester Function :-

        Purpose : - Tests MLoad() function of CVar class.

        """
        self.objCDataContext.MLoad(bReadFromFile = True)
        self.assertNotEqual(self.objCDataContext.m_dictCVarCollection, None)

        #   TODO :- This testcase is incomplete. It'll be completed when the logic
        #           of interaction of python with maui application is done with in
        #           next releases of application.

        return

    """----------------------------------------------------------------------"""

    def testMIsDirectory(self):

        """
        Tester Function :-

        Purpose : - Tests MIsDirectory() function of CVar class.

        """
        objCCVarDirectory = directory.CCVarDirectory(
                                    strNodeName = "MyDir", lsStrChildDirectories = ["MySubDir1", "MySubDir2", "MySubDir3"],
                                    lsStrChildCVars = ["MyChild1", "MyChild2"]
                                )
        objCDataContext = datacontext.CDataContext({"MyDir" : objCCVarDirectory})

        self.assertEqual(objCDataContext.MIsDirectory("MyDir"), True)

        return

    """----------------------------------------------------------------------"""

    def testMIsCVar(self):

        """
        Tester Function :-

        Purpose : - Tests MIsCVar() function of CVar class.

        """
        objCVar = cvar.CVar({"Type" : "String", "Flags" : "RHG", "AbsolutePath" : "InstrumentFamily"})
        objCDataContext = datacontext.CDataContext({"InstrumentFamily" : objCVar})
        self.assertEqual(objCDataContext.MIsCVar("InstrumentFamily"), True)

        return

    """----------------------------------------------------------------------"""
    # TODO : after completing Preferences it will be tested
    def testMGetPreferences(self):

        """
        Tester Function :-

        Purpose : - Tests MGetPreferences() function of CVar class.

        """

        return

    """----------------------------------------------------------------------"""
    # TODO : after completing Preferences it will be tested
    def testMSetPreferences(self):

        """
        Tester Function :-

        Purpose : - Tests MSetPreferences() function of CVar class.

        """

        return

    """----------------------------------------------------------------------"""
    # TODO : after completing Preferences it will be tested
    def testMGetWatchWindowCVars(self):

        """
        Tester Function :-

        Purpose : - Tests MGetWatchWindowCVars() function of CVar class.

        """

        return

    """----------------------------------------------------------------------"""
    # TODO : after completing Preferences it will be tested
    def testMSetWatchWindowCVars(self):

        """
        Tester Function :-

        Purpose : - Tests MSetWatchWindowCVars() function of CVar class.

        """

        return

    """----------------------------------------------------------------------"""

if __name__ == '__main__':
    unittest.main()
